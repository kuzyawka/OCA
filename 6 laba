#include <iostream>
#include <string>
#include <fstream>

using namespace std;
// Дейкстра
class Algoritm
{
private:
	const int infinity = 2147483647; //типо бесконечность (для вершин)
	int ver_cou; // количество вершин
	bool* mark_fiks; // массив фиксации метки. Значения: 0 - вершина не рассмотрена; 1 - вершина рассмотрена
	int* min_dist; // содержит текущие кратчайшие расстояния от исходной до искомой вершины
	int* ver_seque; // для определения последовательности вершин, входящих в кратчайший маршрут
	int** graph_matrix; // матрица графа

public:
	Algoritm(const string& NameOfFile)
	{
		ver_cou = 1;

		// Получение файлового потока
		ifstream& fileGraf = *(new ifstream(NameOfFile.c_str()));
		if (!fileGraf.good())// если поток не обнаружил ошибку
		{
	
				delete& fileGraf;//освобождаем память
			throw string("\nНе получилось открыть файл\n");//исключение
		}

		fileGraf.seekg(0); // прочитать произольную часть файла (не по порядку, ввод)

		//Тут найти размер матрицы
		string temp_buf = "";
		getline(fileGraf, temp_buf);//извлекает данные из потока и вписывает в массив
		for (int i = 0; i < temp_buf.length(); i++)
		{
			if (temp_buf[i] == ' ')
			{
				ver_cou++;
			}
		}

		fileGraf.seekg(0); // возвратить братно указатель чтения

		mark_fiks = new bool[ver_cou];
		min_dist = new int[ver_cou];
		ver_seque = new int[ver_cou];
		graph_matrix = new int* [ver_cou]; // ver_cou строк в матрице
		for (int i = 0; i < ver_cou; i++)
		{
			graph_matrix[i] = new int[ver_cou]; // и ver_cou столбцов
		}

		//Остановка по исчерпанию данных
		while (!fileGraf.eof())//если файл не пуст
		{
			// Заполнение матрицы
			for (int i = 0; i < ver_cou; i++)//вершины
			{
				for (int j = 0; j < ver_cou; j++)
				{
					fileGraf >> graph_matrix[i][j];

					// Остановка при сбое (либо достигнут конец данных, либо произошла ошибка при чтении
					if (fileGraf.fail())
					{
						break;
						throw string("\nНе получилось прочитать файл\n");
					}
				}
			}
		}

		fileGraf.close();//закрыть файл
	}

	void find_way(int start_mark, int end_mark, const string& NameOfFile)//метод поиска пути
	{
		//Превращаем вершины в индексы
		start_mark--;
		end_mark--;

		//Инициализировать массив
		for (int i = 0; i < ver_cou; i++)
		{
			mark_fiks[i] = false;//пока что не пройдена
			min_dist[i] = infinity;//равны бесконечности
			ver_seque[i] = 0;
		}
		min_dist[start_mark] = 0;

		for (int a = 0; a < ver_cou - 1; a++) // Последний элемент можем не рассматривать
		{
			int index_marking = ver_cou, min_mark = infinity;

			// Ищем индекс минимальной метки
			for (int i = 0; i < ver_cou; i++)
			{
				if ((mark_fiks[i] == false) && (min_dist[i] < min_mark))
				{
					min_mark = min_dist[i];
					index_marking = i;
				}
			}

			//проверить соседей
			for (int j = 0; j < ver_cou; j++)
			{
				if ((graph_matrix[index_marking][j] != 0) && (mark_fiks[j] == false))
				{
					if (min_dist[j] > min_dist[index_marking] + graph_matrix[index_marking][j])
					{
						min_dist[j] = min_dist[index_marking] + graph_matrix[index_marking][j];
					}
				}
			}

			// Помечаем вершину с индексом index_marking как посещенную и повторим шаг алгоритма
			mark_fiks[index_marking] = true;
		}

		// Реализация последовательности вершин
		int tempInd = end_mark;
		int ind_mark_val= ver_cou - 1;
		ver_seque[ind_mark_val--] = end_mark + 1;
		for (;;)
		{
			int mark_dist = min_dist[tempInd];

			if (mark_dist == 0)
			{
				break;
			}

			// Ищем соседей вершины
			for (int j = 0; j < ver_cou; j++)
			{
				if ((graph_matrix[tempInd][j] != 0) && (mark_dist - graph_matrix[tempInd][j] == min_dist[j]))
				{
					ver_seque[ind_mark_val--] = j + 1;
					tempInd = j;
					break;
				}
			}
		}

		// Помещение в файл
		ofstream fileGraf(NameOfFile);//ввод

		fileGraf << start_mark + 1 << ' ' << end_mark + 1 << endl;

		for (int i = 0; i < ver_cou; i++)
		{
			if (ver_seque[i] != 0)
			{
				fileGraf << ver_seque[i] << ' ';
			}
		}
		cout << endl;

		fileGraf.close();
	}

	~Algoritm()
	{
		delete[] mark_fiks;
		mark_fiks = nullptr;
		delete[] min_dist;
		min_dist = nullptr;
		delete[] ver_seque;
		ver_seque = nullptr;
		for (int i = 0; i < ver_cou; i++)
		{
			delete[] graph_matrix[i];
		}
		graph_matrix = nullptr;
		ver_cou = 0;
	}
};

int main(int num_elem, char* elem[])
{
	setlocale(LC_ALL, "RUS");
	try
	{
		string graf_orig, graf_target;

		cout << "\nВведите имя файла,в котором матрица: "; getline(cin, graf_orig);//getline(cin, ) ввод данных из потока
		
		cout << "\nВведите имя файла, в котором будет ответ: "; getline(cin, graf_target);

		Algoritm Deikstra(graf_orig);

		bool is_working = true;

		while (is_working)
		{
			int start_mark = 0, end_mark = 0;
			cout << "\n\nВведите начальную вершину: "; cin >> start_mark;
			cout << "\nВведите конечную вершину: "; cin >> end_mark;
			Deikstra.find_way(start_mark, end_mark, graf_target);

			cout << "\nПродолжить? (0 - Нет/1-Да): "; cin >> is_working;
		}
	}
	catch (const string error)
	{
		cout << "\nОшибка :( " << error << endl;
	}

	// Ожидание, позволяющее пользователю увидеть результат работы программы
	cout << "\nЖми энтер, чтобы продолжить...\n";
	cin.get();
	cin.get();
	return 0;
}
