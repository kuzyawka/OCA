#include <iostream>
#include <vector>
#include <fstream>

using namespace std;
/*
        Операции по работе с деревом:
        Добавить элемент
        Поиск элемента
        Обход дерева
        Удаление элемента
*/

/* Задать последовательность двузначных чисел, полученную компиляцией числа, месяца,
года вашего рождения, числа, месяца, года выдачи студенческого билета, номера сотового
телефона. Например: 01 12 19 89 25 08 20 10 91 63 45 56 76

МОЯ:
14 10 03    17 08 21    91 53 76 44 61
*/
class Tree_Binary
{
	struct Bin_El //структура для элемента (значение, пути влево и вправо)
	{
		int Value;
		Bin_El* Left;
		Bin_El* Right;
	};

	struct BinTree //структура создаваемого дерева
	{
		Bin_El* Root_ofTree = nullptr;//nullptr отличается от NULL(это отдельный тип данных), с ним компилятор не перепутает целочисленный тип данных, если программа перегружена и не возникнет никаких лишних проблем. Искользуется для указателей
		int Count_El = 0;//счетчик элементов
	};

	BinTree* Tree;
public:
	Tree_Binary() //конструктор (функция, которая может принимать параметры и называется именем класса (прога не запутается, если передастся значение элемента до его установки))
	{
		Tree = new BinTree;
	}

	void Push_El(int value) //добавление элемента
	{
		Adding(value, Tree->Root_ofTree);//использование еще одной функции adding (она ниже), потому что на вход получаем одно значение, а работаем с двумя. С другими двумя ф-иями то же самое
	}

	void Delete_El(int value) //удаление элемента
	{
		Removing(value, Tree->Root_ofTree);//передаем значения
	}

	bool Find_El(int value) //поиск элемента
	{
		Bin_El* Found_El = Find_El(value, Tree->Root_ofTree); //перемнная с указателем на структуру для элемента = передаем знач, чтобы выполнилась функция поиска
		return Found_El != nullptr;//возвращает переменную не равную нулевому типу
	}

	

	vector<int> Register_Vect() //запись элементов дерева + их дочерних через вектор
	{
		vector<int> Result;
		if (Tree->Root_ofTree != nullptr)//если переменная, переданная в корень, не равна нулевому типу
		{
			Result.push_back(Tree->Root_ofTree->Value);//в результат вписываем элементы. push_back- функция, чтобы вставить новый элемент в конец вектора
			Write_Child_To_Vect(Tree->Root_ofTree, &Result);//дочерние тоже
		}
		else
		{
			throw exception("\nДерево пустое!");//если условие не выполняется, то срабатывает исключение, что дерево пустое
			/*throw используется для перечисления ошибок, которые генерирует функция, но не может самостоятельно обрабатывать исключения*/
		}
		return Result;
	}

	void Save_File() //сохраняет введённое дерево в текстовом файле
	{
		vector<int> Result = Register_Vect();//результат в вектор записи
		ofstream f;//файловый вывод
		f.open("Tree.txt");//открываем файл
		if (f.is_open())
		{
			for (int i = 0; i < Result.size(); i++)
			{
				f << Result[i] << endl;//если открылся, то, пока меньше размера, вводим в файл
			}
		}
		f.close();//закрываем файл
	}

	void Open_File()//метод открытия файла
	{
		ifstream f;//файловый ввод
		f.open("Tree.txt");
		if (f.is_open())
		{
			Tree->Count_El = 0;//передаем в дерево 
			Tree->Root_ofTree = nullptr;
			while (!f.eof())//пока файл не пуст
			{
				int new_Value = NULL;//новое значение, равное 0
				f >> new_Value;
				if (new_Value != NULL)//если число нулю не равно
				{
					Adding(new_Value, Tree->Root_ofTree);//то срабатывет функция добавления
				}
			}
		}
		f.close();
	}
private:
	void Removing(int value, Bin_El*& Branch) //перемещение элементов при удалении конкретного
	{
		if (!Branch)//если не ветка
		{
			throw exception("Такого элемента не существует!");//переходим в исключение
		}
		else if (Branch->Value == value)//если ветка переходит в значение и значение определяется
		{
			if (Branch->Left == nullptr && Branch->Right == nullptr)//если она нулевые типы
			{
				Branch = nullptr;//то и ветка
				return;
			}
			if (Branch->Left != nullptr && Branch->Right != nullptr)//если оба не нулевые
			{
				Bin_El*& N_Elem = Find_Left(Branch->Right);//тогда ищем элемент
				int New_Value = N_Elem->Value;//новое значение переносится 
				if (N_Elem->Right != nullptr)//если эл-т справа не равен нул знач
				{
					N_Elem = N_Elem->Right;//переносится
				}
				else
				{
					N_Elem = nullptr;//иначе нулевой тип
				}
				Branch->Value = New_Value;//а ветка образует новое значение
			}
			else
			{
				if (Branch->Left == nullptr)//иначе же,если ветка слева равна нулевому типу
					Branch = Branch->Right;//то она переходит вправо
				else
					Branch = Branch->Left;//если не равна, то влево
			}
		}
		else//совсем иначе
		{
			if (value >= Branch->Value)//если номер больше или равен 
				Removing(value, Branch->Right);//перемещает вправо
			else
				Removing(value, Branch->Left);//влево
		}
	}

	void Adding(int value, Bin_El*& Branch) //добавление элемента
	{
		if (!Branch)//не ветка
		{
			Branch = new Bin_El;//будет новым элементом
			Branch->Value = value;//новое значение
			Branch->Right = nullptr;//справва ноль
			Branch->Left = nullptr;//слева ноль
		}
		else
		{
			if (value >= Branch->Value)
				Adding(value, Branch->Right);//либо, если значение >= справа, то добавляем вправо
			else
				Adding(value, Branch->Left);//иначе доьавляем влево
		}
	}

	void Write_Child_To_Vect(Bin_El* N_Elem, vector<int>* Result) //запись дочерних путей в вектор
	{
		if (N_Elem->Left != nullptr)//если слева не ноль
		{
			Result->push_back(N_Elem->Left->Value);//вставляем нов эл в вектор
			Write_Child_To_Vect(N_Elem->Left, Result);//функция 
		}
		if (N_Elem->Right != nullptr)//если справа не ноль
		{
			Result->push_back(N_Elem->Right->Value);//то же самое
			Write_Child_To_Vect(N_Elem->Right, Result);
		}
	}

	Bin_El* Find_El(int value, Bin_El* RootEl) //поиск элемента по значению
	{
		if (!RootEl)//если не корень элемента
		{
			return nullptr;//возвращает нулевой тип
		}
		if (RootEl->Value == value)//если равен значению
		{
			return RootEl;//возвращается это значение
		}
		else
		{
			if (value > RootEl->Value)//иначе, если значение больше этого корня
				return Find_El(value, RootEl->Right);//возвращается функция поиска по правой стороне
			else
				return Find_El(value, RootEl->Left);//иначе возвращается по левой стороне
		}
	}

	Bin_El*& Find_Left(Bin_El*& Branch) //поиск из правой ветки наименьшего левого (близкого к исходному)
	{
		if (Branch->Left != nullptr)//если справа не равен нулю
		{
			return Find_Left(Branch->Left);//возвращается поиск наименьшего левого
		}
		return Branch;//возвращается ветка
	}
};

void Print_Tree(vector<int> Vec) //полный вывод
{
	cout << "\nПолное дерево:\n";
	for (int n : Vec)
	{
		cout << n << endl;
	}
}

int main() {
	setlocale(LC_ALL, "RUS");
	Tree_Binary BinTree;

	cout << "\n0 - Выйти";
	cout << "\n1 - Добавить элемент";
	cout << "\n2 - Поиск элемента";
	cout << "\n3 - Вывести все дерево" ;
	cout << "\n4 - Сохранить дерево" ;
	cout << "\n5 - Записать дерево" ;
	cout << "\n6 - Удалить элемент\n";

	bool checking = true;
	int cou;
	int Element;
	while (checking)
	{
		cin >> cou;
		switch (cou)
		{
		case(0):
			checking = false;
			break;
		case(1):
			cout << "\nВведите элемент: \n";
			cin >> Element;
			BinTree.Push_El(Element);
			cout << endl;
			break;
		case(2):
			cout << "\nВведите элемент: \n";
			cin >> Element;
			cout << BinTree.Find_El(Element);
			cout << endl;
			break;
		case(3):
			Print_Tree(BinTree.Register_Vect());
			cout << endl;
			break;
		case(4):
			BinTree.Save_File();
			cout << endl;
			break;
		case(5):
			BinTree.Open_File();
			cout << endl;
			break;
		case(6):
			cout << "\nВведите элемент: \n";
			cin >> Element;
			BinTree.Delete_El(Element);
			cout << endl;
			break;
		default:
			break;
		}
	}
	return 0;
}
