#include <stdlib.h>
#include <iomanip>
#include <tuple>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <cmath>
#include <type_traits>
#pragma warning(disable : 4996) // ошибка компилятора при использовании функции копирования строки(использутеся при присваивании имени базы данных)
using namespace std;


struct Base {//базовая структура
	bool Delete = false;
};
//8. Номер рейса, пункт назначения, время вылета, дата вылета, стоимость билета.

struct Variant8 : Base {
	int number;
	char place[10];
	char time[10];
	char data[10];
	int price;
};


template<typename AStruct, typename = std::enable_if<std::is_base_of<Base, AStruct>::value>> //создать шаблон и потом можно использовать при любых типах переменных (Astruct), наследуется от Basa (плюс структура Delete) 
class Database {
private:
	Variant8 *_baseMas;
	long _base_aSize;
	char* _base_aName;

	void exchange(AStruct* ap, AStruct* bp) {//метод поменять местами
		AStruct per = *ap;
		*ap = *bp;
		*bp = per;
	}

public:
    Database(int length, string base_aName) {
		_base_aName = new char[base_aName.length() + 1];//выделяют новую память для объекта строки
		_base_aSize = length;
		strcpy(_base_aName, base_aName.c_str());//с помощью функции копируем base_aName в _base_aName

		_baseMas = new Variant8[length]; //выделяют новую память для объекта

		for (size_t i = 0; i < _base_aSize; i++)//size_t счетчик цикла, более точный, чем тип int
			_baseMas[i].Delete = true;
	}
	~Database() {//деструктор для освобождения памяти
		delete[] _baseMas;
	}


	/*1. “Очистка” структурных переменных (отметка переменной как не
содержащей данных). Функция должна получать в качестве параметра индекс
массива.
*/
	void Delete_ind(int index) { //метод для удаления
		_baseMas[index].Delete = true;
	}


	/*2. Поиск свободной структурной переменной. Функция должна возвращать
индекс первого свободного элемента в массиве структур.*/
	int FindEmptyper() {
		for (size_t i = 0; i < _base_aSize; i++)
			if (_baseMas[i].Delete)
				return i; //если выполняется, то возвращается индекс этой переменной, если нет, то -1
		return -1;
	}


/*3. Ввод элементов (полей) структуры с клавиатуры. В качестве параметра в
функцию должен передаваться индекс элемента массива*/
	void Add_el( AStruct base, int index) {
		_baseMas[index] = base;
		_baseMas[index].Delete = false;//если добавляем элемент, то поле занято
	}


	/*4. Вывод элементов (полей) структуры на монитор. В функцию должен
передаваться индекс элемента массива.*/
	AStruct Get_el(int index) {//создаем анонимную функцию (лямбду) (объявляются в месте использоания и не получают уникального идентификатора для доступа к ним)
		return _baseMas[index];
	}

	/*5. Вывод на экран всех заполненных элементов массива структур.*/
	vector<AStruct> GetALL_el() {//создать динамический массив типа шаблона с помощью вектора
		vector<AStruct> resultData; //еще динамический массив типа шаблона
		for (size_t i = 0; i < _base_aSize; i++)
			if (!_baseMas[i].Delete)//если не удален
				resultData.push_back(_baseMas[i]);//функция добавления элементов в вектор
		return resultData;
	}

	/*6. Поиск в массиве структур элемента с заданным значением поля или с
наиболее близким к нему по значению. Предусмотреть возможность задания
одного числового значения и одного строкового.
*/
	AStruct* FindNearEl(int (*selectorFunction)(AStruct), int searchEl) {//создаем анонимную функцию (лямбду) (объявляются в месте использоания и не получают уникального идентификатора для доступа к ним). int (*selectorFunction)(AStruct) принмает AStruct и возвращает int, а в нее передаем элемент массива, сравнивая с searchEl 
		int index_nearEl = -1;
		int min = INT_MAX;

		for (size_t i=0; i< _base_aSize; i++)
			if (!_baseMas[i].Delete) {
				int valueMin = abs(selectorFunction(_baseMas[i]) - searchEl);

				if (valueMin < min) {
					min = valueMin;
					index_nearEl = i;
				}
			}
		return index_nearEl == -1 ? (AStruct*)NULL : &_baseMas[index_nearEl];
		//принимает структуру и элемент, который нужно найти, или близкий
}

	AStruct* FindNearString(string(*selectorFunction)(AStruct),string searchEl) {
		for (size_t i = 0; i < _base_aSize; i++)
			if (!_baseMas[i].Delete && selectorFunction(_baseMas[i]).find(searchEl) != string::npos) //вводим константу, обозначающую несуществующий индекс в массиве
				return &_baseMas[i];
		return NULL;
	}
	

	/*7. Поиск в массиве структуры с минимальным значением заданного поля.
Поле должно передаваться в поле числом, обозначающим номер поля в
структуре.*/
template<typename AValue>
AStruct* FindMin(AValue(*selectorFunction)(AStruct)) {//вводим новый шаблонный тип 
	AValue min = selectorFunction(_baseMas[0]);
	int indexMinEl = -1;
    for (size_t i = 0; i < _base_aSize; i++) {
        if (!_baseMas[i].Delete && selectorFunction(_baseMas[i]) <= min)
        {
            indexMinEl = 1;
                min = selectorFunction(_baseMas[i]);
        }
    }
	return indexMinEl == -1 ? (AStruct*)NULL : &_baseMas[indexMinEl];

}
 
/*8. Сортировка массива структур в порядке возрастания заданного поля (при
сортировке можно использовать тот факт, что в Си++ разрешается присваивание
структурированных переменных);*/

/*9. Сортировка массива структур в порядке убывания заданного поля (при
сортировке можно использовать тот факт, что в Си++ разрешается присваивание
структурированных переменных);
*/
void Sort(bool (*selection)(AStruct, AStruct)) {//сортировка пузырьком
	for (int i = 0; i < _base_aSize - 1; i++)
		for (int j = 0; j < _base_aSize - i - 1; j++)
            if (selection(_baseMas[j], _baseMas[j + 1])) {
                AStruct AToSwap = _baseMas[j];
               // swap(&_baseMas[j], &_baseMas[j + 1]);//функция для замены двух переменных
                _baseMas[j] = _baseMas[j + 1];
                    _baseMas[j + 1] = AToSwap;

            }
}

/*11. Функция записи в файл содержимого базы данных (массива структурных
элементов).*/

void Save(int SizeofDB) {
    ofstream out;
    out.open("text.txt");
    if (out.is_open()) {
        for (int i = 0; i <= SizeofDB; i++) {
            if (_baseMas[i].Delete == false) {
                out << _baseMas[i].number << endl;
                out << _baseMas[i].place << endl;
                out << _baseMas[i].time << endl;
                out << _baseMas[i].data << endl;
                out << _baseMas[i].price << endl;
            }
        }
    }
    out.close();
  /*  FILE* file = fopen("gg.txt", "wb");//для записи не текста
   
    for (int i = 0; i < _base_aSize; i++)
        fwrite(&_baseMas[i], sizeof(AStruct), 1, file);
    fclose(file);*/
}

/*10. Функция чтения файла с содержимым базы данных (массива структурных
элементов).*/
void Read(int SizeofDB) {
    ifstream in("text/txt");
   
    if (in.is_open()) {
        for (int i = 0; i <= SizeofDB; i++) {
            if (_baseMas[i].Delete == false) {
                in >> _baseMas[i].number;
                in >> _baseMas[i].place ;
                in >> _baseMas[i].time;
                in >> _baseMas[i].data ;
                in >> _baseMas[i].price ;
            }
        }
    }
    in.close();
  
    /*FILE* file = fopen("gg.txt", "rb");//двоичный вид  записи

    for (int i = 0; i < _base_aSize; i++) 
		fread(&_baseMas[i], sizeof(AStruct), 1, file);
	fclose(file);
    */
}


};


int main() {
    setlocale(LC_ALL, "Russian");
	int SizeofDB;
	string NameofDB;
	int change;
	int cou;
	int numForClean;
	int numForPrint;
	Variant8 first;
	vector<Variant8> all;
    char find;
    char find_swInt;
    char find_swStr;
    int numb, cost, typeSorting;
    string places, times, datas;
    Variant8* minNumber;
    Variant8* minCost;
    Variant8* placeStr;
    Variant8* timeStr;
    Variant8* dataStr;


	cout << "Введите размер и имя бд: " <<"\nРазмер: ";
	cin >> SizeofDB;
	cout << "Имя: ";
	cin >> NameofDB;

    Database<Variant8>* database = new Database<Variant8>(SizeofDB, NameofDB);
	do {
		cout << "\nВыбор: \n1.Ввод элементов в бд \n2.Очистка элементов в бд \n3.Поиск свободной переменной  \n4.Вывод одного элемента  \n5.Вывод всей бд  \n6.Поиск с заданным значением поля  \n7.Сортировка  \n8.Сохранение бд в файл  \n 9.Чтение записей из файла   \n0.Выход из программы\n" << endl;
		cin >> change;
		switch (change) {
		case 1:
			cout << "\n\nКоличество необходимых записей в бд: ";
			do {
				cin >> cou;
			} while (cou > SizeofDB);
			for (size_t j = 0; j < cou; j++) {
				Variant8 structure;
				cout << "\nНомер рейса: ";
				cin >> structure.number;
				cout << "\nПункт назначения: ";
				cin >> structure.place;
				cout << "\nВремя вылета (в строку): ";
				cin >> structure.time;
				cout << "\nДата вылета (в строку): ";
				cin >> structure.data;
				cout << "\nСтоимость билета: ";
				cin >> structure.price;

				database->Add_el(structure, j);
				cout << "\nДобавлено " << j + 1 << " из " << cou << endl;

			}
			break;

		case 2:
			cout << "\n\nОчистить элемент. Введите его номер (от 0): ";
			cin >> numForClean;
			while (numForClean >= SizeofDB) {
				cout << "\nОшибка, введите другое значение: ";
				cin >> numForClean;
			}
				database->Delete_ind(numForClean);
				break;
		case 3:
			cout << "\n\nПервая свободная переменная: " << database->FindEmptyper();
			break;
		case 4:
			cout << "\n\nНомер элемента, который нужно вывести (с нуля): ";
			cin >> numForPrint;
			while (numForPrint >= SizeofDB) {
				cout << "\nОшибка, введите другое значение: ";
				cin >> numForPrint;
			}
			first = database->Get_el(numForPrint);
			cout << first.number << "\n" << first.place << "\n" << first.time << "\n" << first.data << "\n" << first.price;
			break;
		case 5:
            cout << "\n\nБаза данных:\n" << database->FindEmptyper() << endl;
			all = database->GetALL_el();
			cout << "Номер рейса   " << setfill(' ') << "Пункт назнач   " << setfill(' ') << "Время вылета   " << setfill(' ') << "Дата вылета   " << setfill(' ') << "Стоимость билета   " << endl;
            for (size_t i = 0; i < all.size(); i++)
                cout << all[i].number << "             " << all[i].place << "             " << all[i].time << "          " << all[i].data << "          " << all[i].price << endl;
			break;   



            
        case 6:
            cout << "\nНажмите i - для числового типа, s - для строкового: ";
            cin >> find;
            switch (find) {
            case 'i':
                cout << "\nИскать: n-номер рейса , s-стоимость билета" << endl;
                cin >> find_swInt;
                    switch (find_swInt) {
                case 'n':
                    cout << "\nНомер рейса для поиска: ";
                    cin >> numb;
                    cout << "\nНомер рейса: ";
                    minNumber = database->FindNearEl([](Variant8 p) { return p.number; }, numb);
                    if (minNumber == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << minNumber->number << " " << minNumber->place << " " << minNumber->time << " " << minNumber->data<<" "<<minNumber->price << endl;
                    break;
                case 's':
                    cout << "\nСтоимость билета для поиска: ";
                    cin >> cost;
                    cout << "\nСтоимость билета: ";
                    minCost = database->FindNearEl([](Variant8 p) { return p.price; }, cost);
                    if (minCost == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << minCost->number << " " << minCost->place << " " << minCost->time << " " << minCost->data << " " << minCost->price << endl;
                    break;
             
                }break;

            case 's':
                cout << "\n Искать: p-пункт назначения , t-время вылета , d-дата вылета " << endl;
                cin >> find_swStr;
                switch (find_swStr) {
                case 'p':
                    cout << "\nПункт назначения для поиска: ";
                    cin >> places;
                    placeStr = database->FindNearString ([](Variant8 p) { return string(p.place); }, places);
                    if (placeStr == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << placeStr->number << " " << placeStr->place << " " << placeStr->time << " " << placeStr->data << " " << placeStr->price << endl;
                    break;

                case 't':
                    cout << "\nВремя вылета для поиска: ";
                    cin >> times;
                    timeStr = database->FindNearString([](Variant8 p) { return string(p.time); }, times);
                    if (timeStr == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << timeStr->number << " " << timeStr->place << " " << timeStr->time << " " << timeStr->data << " " << timeStr->price << endl;
                    break;
                case 'd':
                    cout << "\nДата вылета для поиска: ";
                    cin >> datas;
                    dataStr = database->FindNearString([](Variant8 p) { return string(p.data); }, datas);
                    if (dataStr == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << dataStr->number << " " << dataStr->place << " " << dataStr->time << " " << dataStr->data << " " << dataStr->price << endl;
                    break;
                }


            }break;


        case 7:

            cout << "\nВыберите тип сортировки: 1 - минимальное по строке , 2 - минимальное по числу, 3 - по возрастанию, 4 - по убыванию: " << endl;
            cin >> typeSorting;
            switch (typeSorting) {
            case 1:
                cout << "\nИщем: 1-место, 2-время, 3-дату: " << endl;
                int b;
                cin >> b;

                switch (b) {
                case 1:
                    cout << "\nМесто: ";
                    placeStr = database->FindMin<string>([](Variant8 p) { return (string)p.place; });
                   
                        cout << placeStr->number << " " << placeStr->place << " " << placeStr->time << " " << placeStr->data << " " << placeStr->price << endl;
                    break;
                case 2:
                    cout << "\nВремя: ";
                    timeStr = database->FindMin<string>([](Variant8 p) { return (string)p.time; });

                    cout << timeStr->number << " " << timeStr->place << " " << timeStr->time << " " << timeStr->data << " " << timeStr->price << endl;
                    break;
                case 3:
                    cout << "\nДата: ";
                    dataStr = database->FindMin<string>([](Variant8 p) { return (string)p.data; });

                    cout << dataStr->number << " " << dataStr->place << " " << dataStr->time << " " << dataStr->data << " " << dataStr->price << endl;
                    break;
                }


            case 2:
            {
                int find_sw;
                cout << "\nИщем: номер билета - 1, цену - 2: " << endl;
                cin >> find_swInt;
                switch (find_swInt) {
                case 2:
                    cout << "\nМинимальная цена: ";
                    minCost = database->FindMin<int>([](Variant8 p) { return p.price; });
                    if (minCost == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout  << minCost->number << " " << minCost->place << " " << minCost->time << " " << minCost->data << " " << minCost->price << endl;
                    break;
                case 1:
                    cout << "\nМинимальный номер билета: ";
                    minNumber = database->FindMin<int>([](Variant8 p) { return p.number; });
                    if (minNumber == NULL)
                        cout << "NotFound!" << endl;
                    else
                        cout << minNumber->number << " " << minNumber->place << " " << minNumber->time << " " << minNumber->data << " " << minNumber->price << endl;
                    break;
               
                }

            } break;
            case 3:
            {

                int insrt;
                cout << "Критерий сортировки: 1 - номер билета, 2 - место, 3 - время, 4- дата, 5 - цена: " << endl;
                cin >> insrt;
                switch (insrt) {
                case 1:
                    database->Sort([](Variant8 p1, Variant8 p2) { return int(p1.number) > int(p2.number); });
                    cout << "Сортировка по возрастанию номера билета: " << endl;
                    all = database->GetALL_el();
                    for (size_t i = 0; i < all.size(); i++)
                        cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data<<" "<<all[i].price << endl;
                    break;
                case 2:
                    database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.place) > string(p2.place); });
                    cout << "Сортировка по возрастанию места: " << endl;
                    all = database->GetALL_el();
                    for (size_t i = 0; i < all.size(); i++)
                        cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                    break;

                case 3:
                    database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.time) > string(p2.time); });
                    cout << "Сортировка по возрастанию времени: " << endl;
                    all = database->GetALL_el();
                    for (size_t i = 0; i < all.size(); i++)
                        cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                    break;

                case 4:
                    database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.data) > string(p2.data); });
                    cout << "Сортировка по возрастанию даты: " << endl;
                    all = database->GetALL_el();
                    for (size_t i = 0; i < all.size(); i++)
                        cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                    break;
                case 5:
                    database->Sort([](Variant8 p1, Variant8 p2) { return int(p1.price) > int(p2.price); });
                    cout << "Сортировка по возрастанию цены: " << endl;
                    all = database->GetALL_el();
                    for (size_t i = 0; i < all.size(); i++)
                        cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                    break;


                }
            }break;

            case 4:
            { 
                int insrt;
            cout << "Критерий сортировки: 1 - номер билета, 2 - место, 3 - время, 4- дата, 5 - цена: " << endl;
            cin >> insrt;
            switch (insrt) {
            case 1:
                database->Sort([](Variant8 p1, Variant8 p2) { return int(p1.number) < int(p2.number); });
                cout << "Сортировка по возрастанию номера билета: " << endl;
                all = database->GetALL_el();
                for (size_t i = 0; i < all.size(); i++)
                    cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                break;
            case 2:
                database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.place) < string(p2.place); });
                cout << "Сортировка по возрастанию места: " << endl;
                all = database->GetALL_el();
                for (size_t i = 0; i < all.size(); i++)
                    cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                break;

            case 3:
                database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.time) < string(p2.time); });
                cout << "Сортировка по возрастанию времени: " << endl;
                all = database->GetALL_el();
                for (size_t i = 0; i < all.size(); i++)
                    cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                break;

            case 4:
                database->Sort([](Variant8 p1, Variant8 p2) { return string(p1.data) < string(p2.data); });
                cout << "Сортировка по возрастанию даты: " << endl;
                all = database->GetALL_el();
                for (size_t i = 0; i < all.size(); i++)
                    cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                break;
            case 5:
                database->Sort([](Variant8 p1, Variant8 p2) { return int(p1.price) < int(p2.price); });
                cout << "Сортировка по возрастанию цены: " << endl;
                all = database->GetALL_el();
                for (size_t i = 0; i < all.size(); i++)
                    cout << all[i].number << " " << all[i].place << " " << all[i].time << " " << all[i].data << " " << all[i].price << endl;
                break;
                }
            }

            }break;
        case 8:
            database->Save(SizeofDB);
            cout << "Сохранено.\n";
            break;

        case 9:
            database->Read(SizeofDB);
            cout << "Прочитано.\n";
            break;

        case 0:
            cout << "Работа закончена."; break;


        }
    } while (change != 0);

    return 0;
}
